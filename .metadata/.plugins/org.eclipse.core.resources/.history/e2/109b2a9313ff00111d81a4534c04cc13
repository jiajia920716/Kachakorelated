package org.kachako.ml.Segment;



import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.mapreduce.InputSplit;
import org.apache.hadoop.mapreduce.RecordReader;
import org.apache.hadoop.mapreduce.TaskAttemptContext;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import java.io.IOException;


public class WholeFileRecordReader
  extends RecordReader<NullWritable, BytesWritable> {

  private FileSplit fileSplit;
  private Configuration conf;
  private boolean processed = false;
  private BytesWritable value = new BytesWritable();

  public WholeFileRecordReader(InputSplit inputSplit, TaskAttemptContext context)
    throws IOException, InterruptedException {

    initialize(inputSplit, context);
  }

  public void initialize(InputSplit inputSplit, TaskAttemptContext context)
    throws IOException, InterruptedException {

    this.fileSplit = (FileSplit)inputSplit;
    this.conf = context.getConfiguration();
  }

  public NullWritable getCurrentKey()
    throws IOException, InterruptedException {

    return NullWritable.get();
  }

  public BytesWritable getCurrentValue()
    throws IOException, InterruptedException {

    return value;
  }

  public float getProgress()
    throws IOException, InterruptedException {

    return processed ? 1.0f : 0.0f;
  }

  public boolean nextKeyValue()
    throws IOException, InterruptedException {

    if (!processed) {
      byte[] contents = new byte[(int) fileSplit.getLength()];
      Path file = fileSplit.getPath();
      FileSystem fs = file.getFileSystem(conf);
      FSDataInputStream in = null;
      try {
        in = fs.open(file);
        in.readFully(0, contents, 0, contents.length);
        value.set(contents, 0, contents.length);
        conf.set("map.input.file", conf.get("mapred.input.dir") + "/" + file.getName());
      } finally {
        in.close();
      }

      processed = true;
      return true;
    }
    return false;
  }

  public void close() throws IOException {
    // do nothing
  }
}